#!/usr/bin/env node
var updatedb=false;
/**
 * Module dependencies.
 */

var app1 = require('../app');
var app2 = require('../app');
var app3 = require('../app');
var debug = require('debug')('foo:server');
const http = require('http');
const https = require('https');
const fs = require('fs');

const {file } = require('../helpers')
var privateKey  = fs.readFileSync('./key.pem', 'utf8');
var certificate = fs.readFileSync('./cert.pem', 'utf8');
var knex = require("../utils/databaseConection");
var credentials = {key: privateKey, cert: certificate};

updateDatabase();
deletemage();
/**
 * Get port from environment and store in Express.
 */

var port1 = normalizePort(process.env.port1);
app1.set('port', port1);
var port2 = normalizePort(process.env.port2);
app2.set('port', port2);
var port3 = normalizePort(process.env.port3);
app3.set('port', port3);

/**
 * Create HTTP server.
 */
var server1 = http.createServer(app3);
var server2 = http.createServer(app2);
var server3 = https.createServer(credentials,app1);

/**
 * Listen on provided port, on all network interfaces.
 */

server1.listen(port3);
server1.on('error', onError);
server1.on('listening', onListening);

server2.listen(port2);
server2.on('error', onError);
server2.on('listening', onListening);

server3.listen(port1);
server3.on('error', onError);
server3.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

async function updateDatabase() {
  var d = new Date();
  if(updatedb)
  {
    try{
      // await knex.schema.dropTable('users');
    await knex.migrate.list().catch(async function(err) {
      await file("error/"+d.getFullYear()+"_"+d.getMonth()+"_"+d.getDate()+"_"+d.getUTCHours()+"_"+d.getUTCMinutes()+"_"+d.getUTCSeconds(), "a",""+err.stack);
    });
    await knex.migrate.latest().catch(async function(err) {
      await file("error/"+d.getFullYear()+"_"+d.getMonth()+"_"+d.getDate()+"_"+d.getUTCHours()+"_"+d.getUTCMinutes()+"_"+d.getUTCSeconds(), "a",""+err.stack);
    });
    await knex.seed.run().catch(async function(err) {
      await file("error/"+d.getFullYear()+"_"+d.getMonth()+"_"+d.getDate()+"_"+d.getUTCHours()+"_"+d.getUTCMinutes()+"_"+d.getUTCSeconds(), "a",""+err.stack);
    });
    }catch (err){
      //console.log(error);
      await file("error/"+d.getFullYear()+"_"+d.getMonth()+"_"+d.getDate()+"_"+d.getUTCHours()+"_"+d.getUTCMinutes()+"_"+d.getUTCSeconds(), "a",""+err.stack);
    }
  
  }
  //console.log(await knex.migrate.list());
}

async function deletemage() {
  setInterval(async function() {

    /*fs.readdir(directoryPath, function (err, files) {
      //handling error
      if (err) {
          return console.log('Unable to scan directory: ' + err);
      } 
      //listing all files using forEach
      files.forEach(function (file) {
          // Do whatever you want to do with the file
          console.log(file); 
      });*/
  



    /*fs.unlink("./files/images/"+body.data.path+".txt").catch(async function(err) {
      var d = new Date();
      await file(
        "logs/" + d.getFullYear() + "_" + d.getMonth() + "_" + d.getDate(),
        "a",
        err.stack
      );
      errormesage = { sucess : false , mesage: "something went wrong and we are working on it 1" };
      res.send(errormesage);
      console.log(err);
    });*/

    }, 3600000);
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server1.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  var addr = server2.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  var addr = server3.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
